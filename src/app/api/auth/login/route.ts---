import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { signToken } from "../../../lib/jwt";
import { SignJWT, jwtVerify } from "jose";
const data = require("../../../lib/dbutils");

export async function POST(req: Request) {
  const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";
  try {
    const { email, password } = await req.json();

    // const user = users.find((u) => u.email === email);
    // if (!user) {
    //   return NextResponse.json({ error: "User not found" }, { status: 404 });
    // }

    const user = await data.findUserByEmail(email);

    if (!user) {
      return NextResponse.json(
        { error: "Email is not available" },
        { status: 404 }
      );
    }

    // Check password
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return NextResponse.json(
        { error: "Wrong credentials either email or  password" },
        { status: 401 }
      );
    }

    // // Generate JWT Token
    // const token = signToken({
    //   username: user.username,
    //   userId: user.Id,
    //   email: user.email,
    //   isAdmin: user.isAdmin,
    //   isActive: user.isActive,
    //   isLoggedIn: true,
    // });

    /** Create JWT */
    const secret = new TextEncoder().encode(SECRET_KEY);

    const jwt = await new SignJWT({
      username: user.username,
      userId: user.Id,
      email: user.email,
      isAdmin: user.isAdmin,
      isActive: user.isActive,
      isLoggedIn: true,
    })
      .setProtectedHeader({ alg: "HS256" })
      .setIssuedAt()
      .setExpirationTime("1d")
      .sign(secret);

    // Respond with the token

    // Set cookie for authentication
    // const response = NextResponse.redirect(new URL("/dashboard", req.url)); // Redirect to dashboard

    const response = NextResponse.json(
      {
        token: jwt,
        msg: "User successfull login",
        success: true,
        user: {
          username: user.username,
          userId: user.Id,
          email: user.email,
          isAdmin: user.isAdmin,
          isActive: user.isActive,
          isLoggedIn: true,
        },
      },
      { status: 200 }
    );

    // response.cookies.set("token", token, {
    //   httpOnly: true,
    //   secure: true,
    //   path: "/",
    // });

    return response;
  } catch (error) {
    return NextResponse.json({ error: "Server Error" }, { status: 500 });
  }
}
